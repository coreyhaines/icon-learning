link testlibrary

procedure main()
  formatFailureMessage_tests()
  equal_tests()
  listToString_tests()
  assertEqual_tests()
end

procedure formatFailureMessage_tests()
  write("Testing formatFailureMessage")
  assertEqual("Expected 1, but received 2",
      formatFailureMessage(1, 2)
      )
  assertEqual("Expected \"foo\", but received \"bar\"",
      formatFailureMessage("foo", "bar")
      )
  assertEqual("Expected [1, 2], but received [1, 3]",
      formatFailureMessage([1, 2], [1, 3])
      )
  write()
end

procedure listToString_tests()
  write("Testing listToString")
  assertEqual("[]", listToString([]))
  assertEqual("[1]", listToString([1]))
  assertEqual("[1, 2]", listToString([1,2]))
  assertEqual("[\"foo\", \"bar\"]", listToString(["foo", "bar"]))
  write()
end

procedure equal_tests()
  write("Testing equal")
  write((equal("foo", "foo"),"P: same string") | "F")
  write((equal("foo", "bar"),"F") | "P: different strings")

  write((equal(1, 1),"P: same number") | "F")
  write((equal(1, 2),"F") | "P: different numbers")

  write((equal([], []),"P: empty list") | "F")
  write((equal([1], [1]),"P: same list (1 element)") | "F")
  write((equal([1,2], [1,2]),"P: same list (2 element)") | "F")
  write((equal([1,2,[3,4]], [1,2,[3,4]]),"P: same list (nested list)") | "F")
  write((equal([1], [2]),"F") | "P: different lists")
  write((equal([1], [2,3]),"F") | "P: different lists")
  write((equal([1,2], [1,3]),"F") | "P: different lists")
  write((equal([1,2,3], [1,2,4]),"F") | "P: different lists")
end

procedure assertEqual_tests()
  write("Testing assertEqual. Should be P, then F.")
  string_tests()
  number_tests()
  list_tests()
  write()
end

procedure string_tests()
  assertEqual("foo", "foo") # Expected pass
  assertEqual("foo", "bar") # Expected fail
end

procedure number_tests()
  assertEqual(1, 1) # Expected pass
  assertEqual(1, 2) # Expected fail
end

procedure list_tests()
  assertEqual([1, 2], [1, 2]) # Expected pass
  assertEqual([1, 2], [1, 3]) # Expected fail
end
