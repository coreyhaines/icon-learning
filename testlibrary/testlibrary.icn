procedure equal(first, second)
  return case type(first) of {
    "integer": first = second
    "string": first == second
    "list" : compareList(first, second)
    default : first === second
  }
end

procedure compareList(first, second)
  return *first = *second &
    not (i := 1 to *first & not equal(first[i], second[i]))
end

procedure formatListEntry(entry)
  return case type(entry) of {
    "string": "\""||entry||"\""
    default : entry
  }
end

procedure listToString(listToFormat)
  asString := "["
  every a := !listToFormat[1:-1] do {
    asString := asString||formatListEntry(a)||", "
  }
  asString := asString||formatListEntry(listToFormat[-1])
  asString := asString||"]"

  return asString
end

procedure assertEqual(expected, actual)
  if equal(expected, actual) then
    write("P")
  else
    write("F: expected '", expected, "' but got '", actual, "'")
end
