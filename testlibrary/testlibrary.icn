procedure assertEqual(expected, actual)
  if equal(expected, actual) then
    writes("P")
  else
    write() &
      write("F: ", formatFailureMessage(expected, actual))
end

procedure equal(first, second)
  return case type(first) of {
    "integer": first = second
    "string": first == second
    "list" : compareList(first, second)
    default : first === second
  }
end

procedure compareList(first, second)
  return *first = *second &
    not (i := 1 to *first & not equal(first[i], second[i]))
end

procedure formatFailureMessage(expected, actual)
  return "Expected "||toString(expected)||", but received "||toString(actual)
end

procedure toString(value)
  return case type(value) of {
    "string": "\""||value||"\""
    "list": listToString(value)
    default: value
  }
end

procedure listToString(listToFormat)
  asString := "["
  every a := !listToFormat[1:-1] do {
    asString := asString||toString(a)||", "
  }
  asString := asString||toString(listToFormat[-1])
  asString := asString||"]"

  return asString
end
